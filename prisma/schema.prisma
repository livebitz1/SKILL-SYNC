generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProjectMemberStatus {
  APPLIED
  ACCEPTED
  REJECTED
}

model User {
  id                 String          @id @unique
  email              String          @unique
  firstName          String?
  lastName           String?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  imageUrl           String?
  githubUrl          String?
  linkedinUrl        String?
  portfolioUrl       String?
  showProfileInLearn Boolean         @default(true)
  projectsCreated    Project[]
  projectMemberships ProjectMember[]
  skills             Skill[]
}

model Skill {
  id       String @id @default(cuid())
  name     String
  level    String
  category String
  type     String
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id               String          @id @default(cuid())
  title            String
  shortDescription String
  description      String
  category         String
  requiredSkills   String[]
  difficulty       String
  teamSize         Int?
  status           String
  durationWeeks    Int?
  creatorId        String
  attachments      String[]        @default([])
  bannerUrl        String?
  featured         Boolean         @default(false)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  creator          User            @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  members          ProjectMember[]
}

model ProjectMember {
  id        String   @id @default(cuid())
  userId    String
  projectId String
  role      String?
  joinedAt  DateTime @default(now())

  // Application / profile fields for joiners
  fullName            String?
  contactInfo         String?
  portfolioUrl        String?
  skills              String[]  @default([])
  preferredRole       String?
  availability        String?
  motivation          String?
  agreedToGuidelines  Boolean   @default(false)

  // approval status
  status    ProjectMemberStatus @default(APPLIED)
  acceptedAt DateTime?

  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
}
